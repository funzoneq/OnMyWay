#!/bin/bash
#
# boot_script  Startup script for to processing commands passed as kernel
#              arguments
#
# chkconfig: - 95 05
# description: This faux-daemon is designed to handle SCRIPT_URL and
#              SCRIPT_CMD parameters pass at kernel load, which are read from
#              /proc/cmdline, and used to extend boot behavior
# processname: boot_script
# config:      /proc/cmdline
# pidfile:     /var/run/boot_script_cmd.pid
# Source function library.
. /etc/rc.d/init.d/functions

DOWNLOAD_DIR="/var/tmp"
URL_PID_FILE="/var/run/boot_script_url.pid"
CMD_PID_FILE="/var/run/boot_script_cmd.pid"

TIMESTAMP=$(date +%Y%m%d%H%M%S)
DOWNLOAD_NAME="${DOWNLOAD_DIR}/CURLED_SCRIPT_${TIMESTAMP}"

SCRIPT_URL=$(grep -o -e 'SCRIPT_URL=[^ ]*' /proc/cmdline | awk '{split($0,array,"=")} END{print array[2]}')
SCRIPT_CMD=$(grep -o -e 'SCRIPT_CMD=[^ ]*' /proc/cmdline | awk '{split($0,array,"=")} END{print array[2]}')

curl_param_url_and_run() {
  RESULT=0
  # Download and run the passed script URL (if provided)
  if [[ "${SCRIPT_URL}x" != "x" ]]
  then
    curl -o $DOWNLOAD_NAME $SCRIPT_URL
    RESULT=$?
    echo "Curl result: [$RESULT]"
    if [[ $RESULT == 0 ]]
    then
      chmod +x $DOWNLOAD_NAME
      $DOWNLOAD_NAME &
      RESULT=$?
      echo $! > "$URL_PID_FILE"
    else
      echo "ERROR: curl returned [$RESULT]"
    fi 
  else
    echo "INFO: no SCRIPT_URL param"
    RESULT=0
  fi
  [[ $RESULT -eq 0 ]]
}

run_param_cmd() {
  # Run the passed script CMD (if provided)
  if [[ "${SCRIPT_CMD}x" != "x" ]]
  then
    if [ -x $SCRIPT_CMD ]
    then
      $SCRIPT_CMD &
      RESULT=$?
      echo $! > "$CMD_PID_FILE"
    else
      echo "ERROR: script path [${SCRIPT_CMD}] is not executable"
    fi
  else
    echo "INFO: no SCRIPT_CMD param"
    RESULT=0
  fi
  [[ $RESULT -eq 0 ]]
}

start() {
	echo -n "Starting boot_script services: "
	curl_param_url_and_run
	curl_result=$?
	run_param_cmd
	cmd_result=$?
	touch /var/lock/subsys/boot_script
	return $(( ${curl_result} || ${cmd_result} ))
}

stop() {
	echo -n "Stopping boot_script services (hard!): "
	if [[ ! -z "$URL_PID_FILE" ]]; then
	    $(kill -9 `cat $URL_PID_FILE`)
	    kill_curl_result=$?
	    rm -f "$URL_PID_FILE"
	else
	    kill_curl_result=0
	fi
	if [[ ! -z "$CMD_PID_FILE" ]]; then
	    $(kill -9 `cat $CMD_PID_FILE`)
	    kill_cmd_result=$?
	    rm -f "$CMD_PID_FILE"
	else
	    kill_cmd_result=0
	fi
	rm -f /var/lock/subsys/boot_script
	return $(( ${kill_curl_result} || ${kill_cmd_result} ))
}

case "$1" in
	start)
		start
	;;
	stop)
		stop
	;;
	restart)
		start
		stop
	;;
	status)
		echo -n "You need to investigate this one"
	;;
	*)
		echo "Usage: boot_script {start|stop|restart|status}"
		exit 1
	;;
esac